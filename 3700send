#!/usr/bin/python -u
#
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

PACKETS = {}

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


def create_packet(data):
    return json.dumps({"sequence": SEQUENCE,
                       "data": data,
                       "eof": False
                       })


def send_packets():
    global SEQUENCE
    while True:
        data = sys.stdin.read(DATA_SIZE)
        if (len(data) > 0):
            msg = create_packet(data)
            if sock.sendto(msg, dest) < len(msg):
                log("[error] unable to fully send packet")
            else:
                PACKETS[SEQUENCE] = msg
                log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
                SEQUENCE += len(data)

        else:
            return True

# def resend_packets(seq):
#     min = PACKETS.keys()[0]
#     for sequence, m in PACKETS.items():
#         if sequence < min:
#             min = sequence
#     message = PACKETS[min]
#     log("MIN KEY " + str(min))
#     if sock.sendto(message, dest) < len(message):
#         log("[error] unable to fully send packet")
#     else:
#         pass
#     PACKETS.pop(min)

def resend_packets(seq):
    log("HERE")
    for sequence, message in PACKETS.items():
        if sequence > seq:
            log("HERE2")
            if sock.sendto(message, dest) < len(message):
                log("[error] unable to fully send packet")
            else:
                pass
                # log("[send data] " + str(sequence) + " (" + str(len(message['data'])) + ")")





# Send first packet
send_packets()

# Now read in data, send packets
while True:
    log("ABOUT TO SLEEP")
    result = sock.recvfrom(MSG_SIZE)
    if result:
        (data, addr) = result


        try:
            decoded = json.loads(data)
            # If there is an ack, send next packet
            if decoded['ack'] in PACKETS.keys():
                log("before" + str(len(PACKETS)))
                for sequence, message in PACKETS.items():
                    if (sequence <= decoded['ack']):
                        PACKETS.pop(sequence)
                log("after" + str(len(PACKETS)))

                log("[recv ack] " + str(decoded['ack']))
                for key, value in PACKETS.items():
                    log(str(key))

                # Try to send next packet; break if no more data
                # if (not send_packets()):
                #     break
            else:
                log("ELSE" + str(decoded['ack']))
                resend_packets(decoded['ack'])

            if len(PACKETS) == 0:
                break

        except (ValueError, KeyError, TypeError) as e:
            log("[send corrupt packet]")

    else:
        log("[error] timeout")
        sys.exit(-1)

for i in range(10):
    sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE}), dest)
sys.exit(0)
